@page "/overview"
@* @page "/grid/index" *@
@rendermode InteractiveServer
@layout TelerikLayout

@using System.Collections
@using System.Data
@using BlazorApp1.Components.Layout
@using BlazorApp1.Data
@using BlazorApp1.Data.Vendor
@using BlazorApp1.Models
@using Telerik.DataSource.Extensions
@using Telerik.DataSource;
@using Telerik.SvgIcons

@inject IDatabaseVendor ProductService
<TelerikRootComponent>
Selected value: @selectedValue
<br />

<TelerikComboBox Data="@myComboData" TextField="MyTextField" ValueField="MyValueField" @bind-Value="selectedValue"
                 Placeholder="Select an item..." ShowClearButton="true" Filterable="true" Width="14em">
</TelerikComboBox>

@code {
    IEnumerable<MyDdlModel> myComboData = Enumerable.Range(1, 20).Select(x => new MyDdlModel { MyTextField = "item " + x, MyValueField = x });

    int selectedValue { get; set; }

    //in a real case, the model is usually in a separate file
    //the model type and value field type must be provided to the dropdpownlist
    public class MyDdlModel
    {
        public int MyValueField { get; set; }
        public string MyTextField { get; set; }
    }
}

<TelerikGrid TItem="Dictionary<string, object>"
             OnUpdate="@UpdateHandler"
             OnDelete="@DeleteHandler"
             OnCreate="@CreateHandler"
             ConfirmDelete="true"
             Pageable="true"
             Groupable="true"

             Sortable="true"

             FilterMode="GridFilterMode.FilterMenu"
             Resizable="true"
             Reorderable="true"
             EditMode="GridEditMode.Popup"
             SelectionMode="GridSelectionMode.Multiple"
             OnStateInit="@(args => OnStateInit(args))"
             PageSize="10"
             OnRead="@ReadItems"
             Navigable="true">
    <GridColumns>

        @foreach (var column in GetColumns())
        {
            if (column == "ProductId" || column == "UnitsInStock")
            {
                <GridColumn Field="@column" Title=@column FieldType="@typeof(int)" Width="170px"/>
            }
            else
            {
                <GridColumn Field="@column" Title=@column FieldType="@typeof(string)" Width="170px"/>
            }

        }

        @* <GridCheckboxColumn></GridCheckboxColumn> *@
        @* $1$ <GridColumn Field="@nameof(ProductDto.ProductName)" Title="Product Name" Width="195px" /> #1# *@
        @* <GridColumn Field="@nameof(ProductDto.UnitPrice)" Width="120px" Title="Cost" TextAlign="@ColumnTextAlign.Right"/> *@
        @* <GridColumn Field="@nameof(ProductDto.UnitsInStock)" Title="In Stock" Width="170px"/> *@
        @* <GridColumn Field="@nameof(ProductDto.QuantityPerUnit)" Title="Quantity Per Unit" Width="200px"/> *@
        <GridCommandColumn Width="260px">
            <GridCommandButton Command="Edit" Icon="@SvgIcon.Pencil" ThemeColor="@ThemeConstants.Button.ThemeColor.Primary">Edit</GridCommandButton>
            <GridCommandButton Command="Delete" Icon="@SvgIcon.Trash">Delete</GridCommandButton>
        </GridCommandColumn>
    </GridColumns>
    <GridToolBarTemplate>
        <GridCommandButton Command="Add" Icon="@SvgIcon.Plus">Add Product</GridCommandButton>
    </GridToolBarTemplate>
</TelerikGrid>

@code {
    public List<GenericEntity> Entities { get; set; }
    // public List<CategoryDto> Categories { get; set; }
    DataTable DataTable { get; set; }


    protected override void OnInitialized()
    {
        LoadData();
        // ProductNames = ProductService.GetProducts().Select(p => p.ProductName).Distinct().ToList();
        // ProductNames =  string[]{"one","two"}
        ProductNames = new[]{"Volvo", "BMW", "Ford", "Mazda", "Foo"}.ToList();
        DataTable = GetData();
    }

    private void LoadData()
    {
        // Products = ProductService.GetProducts().ToList();
        // Categories = CategoryService.GetCategories().ToList();
    }

    private List<String> GetColumns()
    {
        // return new List<string> { "1%", "2%", "3%", "4%" };
        // return new List<string> { "ProductName", "UnitPrice", "3%", "4%" };
        return new List<string> { "ProductId", "ProductName", "UnitPrice", "UnitsInStock"};
    }

    public DataTable GetData()
    {
        DataTable table = new DataTable();

        // Make sure you specify the correct types
        // If you have any nulls in your (database) Column, you should use nullable type (int?, DateTime?,...)
        table.Columns.Add("ProductId", typeof(int));
        table.Columns.Add("ProductName", typeof(string));
        table.Columns.Add("UnitPrice", typeof(decimal));
        table.Columns.Add("UnitsInStock", typeof(int));

        // You should set default values to the columns that could be skipped in Create/Edit.
        // The alternative approach is to set the default values in the UpdateHandler and/or CreateHandler.

        // Having a default value in this case will prevent having DBNull values in your DataTable, because
        // DBNull is not parsable to any other primitive type and if you pass it to the grid, some of the operations could be broken
        table.Columns["ProductName"].DefaultValue = default(string);
        table.Columns["UnitPrice"].DefaultValue = default(decimal);
        table.Columns["UnitsInStock"].DefaultValue = default(int);

        for (int i = 1; i < 5; i++)
        {
            // table.Rows.Add(i, "ValueNames " + i);
            // table.Rows.Add(i, ProductNames.ElementAt(i), i, i+2);
            table.Rows.Add(i, ProductNames.ElementAt(i), i * 5.2, i%2);
        }

        return table;
    }

    public List<string> ProductNames { get; set; }

    protected void ReadItems(GridReadEventArgs args)
    {
        // this provides sorting, filtering, paging - the advanced data source operations
        //var datasourceResult = DataTable.ToDataSourceResult(args.Request);

        // this is how you can shape the data from the DataTable so it is usable by the grid
        // and so that there are no invalid DBNull values which can break it
        Console.WriteLine("Reading data");
        // args.Request = new DataSourceRequest()

       // var datatable = GetData();
       var datasourceResult = DataTable.ToDataSourceResult(args.Request);
       // var dscopy = datasourceResult.Data;
       args.Data = (datasourceResult.Data as IEnumerable<Dictionary<string, object>>)
           .Select(x => x.ToDictionary(
               x => x.Key,
               x =>
               {
                   // This is mandatory if you are having some data with empty values (nulls)
                   // DBNull is not parsable to other primitive types and we should convert it manually
                   if (x.Value == DBNull.Value)
                   {
                       return null;
                   }

                   return x.Value;
               }))
           .ToList();
        // args.Data = datasourceResult.Data;
        // args.Data = Products;
        // args.Total = 3;
        args.Total = datasourceResult.Total;
    }

    private void OnStateInit(GridStateEventArgs<Dictionary<string, object>> args)
    {
        args.GridState.GroupDescriptors = new List<GroupDescriptor>()
        {
            new GroupDescriptor()
            {
                // Member = nameof(ProductDto.CategoryId),
                Member = "UnitsInStock",
                MemberType = typeof(int)
            }
        };
    }

    public void UpdateHandler(GridCommandEventArgs args)
    {
        // var product = (ProductDto)args.Item;
        // product.CategoryName = Categories.FirstOrDefault(c => c.CategoryId == product.CategoryId)?.CategoryName;
        // ProductService.UpdateProduct(product);
        LoadData();
    }

    public void DeleteHandler(GridCommandEventArgs args)
    {
        // ProductService.DeleteProduct((ProductDto)args.Item);
        LoadData();
    }

    public void CreateHandler(GridCommandEventArgs args)
    {
        var model = (Dictionary<string, object>)args.Item;

        // update the view-model
        var row = DataTable.NewRow();
        row["ProductId"] = DataTable.Rows.Count + 1;
        foreach (var item in model)
        {
            row[item.Key] = item.Value;
        }

        DataTable.Rows.InsertAt(row, 0);

        // you may also want to send the new row to a service so you can store it in the actual database
    }

    // public void CreateHandler(GridCommandEventArgs args)
    // {
    //     var product = (ProductDto)args.Item;
    //     product.CategoryName = Categories.FirstOrDefault(c => c.CategoryId == product.CategoryId)?.CategoryName;
    //     ProductService.CreateProduct(product);
    //     LoadData();
    // }

    public List<int?> GetFilterValues(CompositeFilterDescriptor filterDescriptor)
    {
        return filterDescriptor.FilterDescriptors.Select(f => (int?)(f as FilterDescriptor).Value).ToList();
    }

    public void ColumnValueChanged(bool value, int categoryId, CompositeFilterDescriptor filterDescriptor)
    {
        var filter = filterDescriptor.FilterDescriptors.FirstOrDefault(f => categoryId.Equals((f as FilterDescriptor).Value));

        filterDescriptor.LogicalOperator = FilterCompositionLogicalOperator.Or;

        if (value && filter == null)
        {
            //filterDescriptor.FilterDescriptors.Add(new FilterDescriptor(nameof(ProductDto.CategoryId), FilterOperator.IsEqualTo, categoryId));
        }
        else if (!value && filter != null)
        {
            filterDescriptor.FilterDescriptors.Remove(filter);
        }
    }
}

<style>
    .width-100 {
        width: 100%;
    }
    .grid .k-grid-content tr {
        line-height: 32px;
    }
</style>
</TelerikRootComponent>