@page "/grid"
@rendermode InteractiveServer
@layout TelerikLayout

@using System.Collections
@using System.Data
@using BlazorApp1.Components.Layout
@using BlazorApp1.Data.Vendor
@using BlazorApp1.Models
@using Telerik.DataSource.Extensions
@using Telerik.DataSource;
@using Telerik.SvgIcons

@inject IDatabaseVendor DataService

<TelerikRootComponent>
    Selected value: @selectedValue
    <br />
    <TelerikComboBox Data="@myComboData" TextField="MyTextField" ValueField="MyValueField" @bind-Value="selectedValue"
                     Placeholder="Select an item..." ShowClearButton="true" Filterable="true" Width="14em">
    </TelerikComboBox>

    @code {
        IEnumerable<MyDdlModel> myComboData = Enumerable.Range(1, 20).Select(x => new MyDdlModel { MyTextField = "item " + x, MyValueField = x });

        int selectedValue { get; set; }

        //the model type and value field type must be provided to the dropdpownlist
        public class MyDdlModel
        {
            public int MyValueField { get; set; }
            public string MyTextField { get; set; }
        }
    }    
    <TelerikGrid TItem="Dictionary<string, object>"
                 OnUpdate="@UpdateHandler"
                 OnDelete="@DeleteHandler"
                 OnCreate="@CreateHandler"
                 ConfirmDelete="true"
                 Pageable="true"
                 Groupable="true"
                 Sortable="true"
                 FilterMode="GridFilterMode.FilterMenu"
                 Resizable="true"
                 Reorderable="true"
                 EditMode="GridEditMode.Popup"
                 SelectionMode="GridSelectionMode.Multiple"
                 OnStateInit="@(args => OnStateInit(args))"
                 PageSize="10"
                 OnRead="@ReadItems"
                 Navigable="true">
        <GridColumns>

            @foreach (var column in GetColumns())
            {
                {
                    <GridColumn Field="@column.Key" Title=@column.Key FieldType="column.Value.Type" 
                                Editable="!column.Value.IsId" Width="170px"/>
                }
            }
            <GridCommandColumn Width="260px">
                <GridCommandButton Command="Edit" Icon="@SvgIcon.Pencil" ThemeColor="@ThemeConstants.Button.ThemeColor.Primary">Edit</GridCommandButton>
                <GridCommandButton Command="Delete" Icon="@SvgIcon.Trash">Delete</GridCommandButton>
            </GridCommandColumn>
        </GridColumns>
        <GridToolBarTemplate>
            <GridCommandButton Command="Add" Icon="@SvgIcon.Plus">Add Product</GridCommandButton>
        </GridToolBarTemplate>
    </TelerikGrid>


    @code {
        DataTable DataTable { get; set; }
        List<GenericEntity> DataEntities { get; set; }
        
        protected override void OnInitialized()
        {
            LoadData();
            selectedValue = 1;
        }

        private void LoadData()
        {
            DataEntities = DataService.GetAll("Employee");
            DataTable = GetData();
        }
        
        private IEnumerable<KeyValuePair<string, GenericEntity.ColumnInfo>> GetColumns()
        {
            return DataEntities.First().ColumnsInfo();
        }

        public DataTable GetData()
        {
            DataTable table = DataEntities.ToDataTable();
            return table;
        }

        protected void ReadItems(GridReadEventArgs args)
        {
            Console.WriteLine("Reading data");

            var datasourceResult = DataTable.ToDataSourceResult(args.Request);
            args.Data = (datasourceResult.Data as IEnumerable<Dictionary<string, object>>)
                .Select(x => x.ToDictionary(
                    x => x.Key,
                    x => x.Value == DBNull.Value ? null : x.Value))
                .ToList();
            args.Total = datasourceResult.Total;
        }

        private void OnStateInit(GridStateEventArgs<Dictionary<string, object>> args)
        {
            
        }

        public void CreateHandler(GridCommandEventArgs args)
        {
            Console.WriteLine("Create handler");
            var model = (Dictionary<string, object>)args.Item;

            var row = DataTable.NewRow();
            row["Id"] = DataTable.Rows.Count + 1;
            foreach (var item in model)
            {
                row[item.Key] = item.Value;
            }

            DataTable.Rows.InsertAt(row, 0);
        }

        public void UpdateHandler(GridCommandEventArgs args)
        {
            // var product = (ProductDto)args.Item;
            // ProductService.UpdateProduct(product);
            LoadData();
        }

        public void DeleteHandler(GridCommandEventArgs args)
        {
            // ProductService.DeleteProduct((ProductDto)args.Item);
            LoadData();
        }

    }

    <style>
    .width-100 {
        width: 100%;
    }
    .grid .k-grid-content tr {
        line-height: 32px;
    }
</style>
</TelerikRootComponent>