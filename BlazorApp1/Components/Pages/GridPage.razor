@page "/grid"
@rendermode InteractiveServer
@layout TelerikLayout

@using System.Data
@using BlazorApp1.Components.Layout
@using BlazorApp1.Data.Vendor
@using BlazorApp1.Models
@using BlazorApp1.Services
@using Telerik.DataSource.Extensions
@using Telerik.DataSource;
@using Telerik.SvgIcons

@inject DatabaseService DatabaseService

<TelerikRootComponent>
    <TelerikComboBox Data="@_vendorData" @bind-Value="SelectedVendor" OnChange="@SelectedVendorHandler"
                     Placeholder="Select database..." Filterable="true" Width="14em">
    </TelerikComboBox>
    <TelerikComboBox Data="@_tablesData" @bind-Value="SelectedTable" OnChange="@SelectedTableHandler"
                     Placeholder="Select table..." Filterable="true" Width="14em">
    </TelerikComboBox>
    <TelerikButton OnClick="@ResetDefault">Reset the Grid</TelerikButton>
    <TelerikButton OnClick="@ResetOrder">Reset order</TelerikButton>
    <TelerikButton OnClick="@ResetState">Reset state</TelerikButton>
    
    <EditPopup @ref="@EditWindow" Columns="@GetColumns().ToDictionary()" ItemValues="@TableItem" 
               SaveAction="@((args) => UpdateHandler(args))"
               ResetAction="@(() => ResetOrder())"/>
    
    <InfoPopup @ref="@InfoWindow" Columns="@GetColumns().ToDictionary()" ItemValues="@TableItem" 
               ResetAction="@(() => ResetOrder())"/>
    
    <ErrorPopup @ref="@ErrorWindow" ResetAction="@(() => ResetOrder())"/>
    
    @code {
        IEnumerable<string> _vendorData = new List<string>();
        IEnumerable<string> _tablesData = new List<string>();

        string SelectedVendor { get; set; } = "";

        string SelectedTable { get; set; } = "";
        
        private void SelectedVendorHandler(object obj)
        {
            Console.WriteLine("Selected vendor:" + obj);
            VendorName = (string)obj;
            DataService = DatabaseService.GetVendor(VendorName);
            ColumnsInfo = [];
            InitTables();
            LoadData();
        }

        private void SelectedTableHandler(object obj)
        {
            Console.WriteLine("Selected table:" + obj);
            TableName = (string)obj;
            ColumnsInfo = [];
            LoadData();
        }

    }

    <TelerikGrid TItem="Dictionary<string, object>"
                 OnDelete="@DeleteHandler"
                 OnCreate="@CreateHandler"
                 ConfirmDelete="true"
                 Pageable="true"
                 Groupable="true"
                 Sortable="true"
                 FilterMode="GridFilterMode.FilterMenu"
                 Resizable="true"
                 Reorderable="true"
                 EditMode="GridEditMode.Popup"
                 SelectionMode="GridSelectionMode.Multiple"
                 OnStateInit="@(args => OnStateInit(args))"
                 OnStateChanged="@(args => OnGridStateChanged(args))"
                 PageSize="5"
                 @ref="@GridRef"
                 OnRead="@ReadItems"
                 Navigable="true">
        <GridColumns>
            @{var columnId = 0;}
            @foreach (var column in GetColumns())
            {
                <GridColumn Id="@columnId.ToString()" Field="@column.Key" Title=@column.Key FieldType="column.Value.Type"
                            Editable="!column.Value.IsId" Width="170px"/>
                columnId++;
            }
  
            <GridCommandColumn Id="999" Width="160px" ShowColumnChooser="true">
                <GridCommandButton OnClick="@((args)=> DisplayItem((args.Item as Dictionary<string, object>)!))" Icon="@SvgIcon.Accessibility">Info</GridCommandButton>
                <GridCommandButton OnClick="@((args)=> EditItem((args.Item as Dictionary<string, object>)!))" Icon="@SvgIcon.Pencil">Edit</GridCommandButton>
                <GridCommandButton Command="Delete" Icon="@SvgIcon.Trash">Delete</GridCommandButton>
            </GridCommandColumn>

        </GridColumns>
        <GridToolBarTemplate>
            <GridCommandButton Command="Add" Icon="@SvgIcon.Plus">Add new item</GridCommandButton>
        </GridToolBarTemplate>
    </TelerikGrid>


    @code {
        IDatabaseVendor DataService { get; set; }
        DataTable DataTable { get; set; }
        List<GenericEntity> DataEntities { get; set; }
        TelerikGrid<Dictionary<string, object>> GridRef { get; set; }
        Dictionary<string, object> TableItem { get; set; } = new();
        IEnumerable<KeyValuePair<string, GenericEntity.ColumnInfo>> ColumnsInfo { get; set; } = [];
        EditPopup EditWindow;
        InfoPopup InfoWindow;
        ErrorPopup ErrorWindow;
        
        string VendorName { get; set; } = "";
        string TableName { get; set; } = "";

        protected override void OnInitialized()
        {
            var vendorNames = DatabaseService.VendorNames();
            _vendorData = vendorNames;
            SelectedVendor = vendorNames[0];
            VendorName = SelectedVendor;
            DataService = DatabaseService.GetVendor(VendorName);
            InitTables();
            LoadData();
        }

        public void ResetDefault()
        {
            GridRef.Rebind();
        }
        
        public void ResetState()
        {
            GridRef.SetStateAsync(null);
        }

        public void ResetOrder()
        {
            Console.WriteLine("Reset column order");
            if (GridRef == null)
            {
                return;
            }
            var state = new GridState<Dictionary<string, object>>();  //Creating a new empty state
            var gridColumnStates = GridRef.GetState().ColumnStates;

            foreach (var columnState in gridColumnStates)
            {
                columnState.Index = Convert.ToInt32(columnState.Id);
            }
            
            state.ColumnStates = gridColumnStates;
            GridRef.SetStateAsync(state);
        }

        private void InitTables()
        {
            var allTables = DataService.GetAllTables();
            _tablesData = allTables;
            SelectedTable = allTables[0];
            TableName = SelectedTable;
        }

        private void LoadData()
        {
            Console.WriteLine("---Loading data---");
            try
            {
                DataEntities = DataService.GetAll(TableName);
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
                ErrorWindow.Show("LOAD",$"Load all from {TableName}" , e.Message);
            }
            DataTable = GetData();
            ResetOrder();
        }

        private IEnumerable<KeyValuePair<string, GenericEntity.ColumnInfo>> GetColumns()
        {
            if (!ColumnsInfo.Any())
            {
                try
                {
                    ColumnsInfo = DataService.GetEmpty(TableName).ColumnsInfo();
                }
                catch (Exception e)
                {
                    Console.WriteLine(e);
                    ErrorWindow.Show("LOAD",$"Load columns for {TableName}",e.Message);
                }
            }
            return ColumnsInfo;
        }

        public DataTable GetData()
        {
            return DataEntities.ToDataTable();
        }

        protected void ReadItems(GridReadEventArgs args)
        {
            var datasourceResult = DataTable.ToDataSourceResult(args.Request);
            args.Data = (datasourceResult.Data as IEnumerable<Dictionary<string, object>>)
                .Select(x => x.ToDictionary(
                    x => x.Key,
                    x => x.Value == DBNull.Value ? null : x.Value))
                .ToList();
            args.Total = datasourceResult.Total;
            Console.WriteLine("Reading data - Total:" + args.Total);
        }

        private void OnStateInit(GridStateEventArgs<Dictionary<string, object>> args)
        {
            Console.WriteLine("---State init---");
        }
        
        private void OnGridStateChanged(GridStateEventArgs<Dictionary<string, object>> args)
        {
            //Putting ResetOrder() here will block Add item popup!!!!
            //Looks like StateHasChanged() has no effect on this callback
            Console.WriteLine("---State changed---");
        }

        public void CreateHandler(GridCommandEventArgs args)
        {
            Console.WriteLine("---Creating entity---");
            var model = (Dictionary<string, object>)args.Item;
            var entity = model.ToEntity(DataService.GetEmpty(TableName));
            try
            {
                DataService.CreateOne(entity);
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
                ErrorWindow.Show("CREATE",entity.ToString(), e.Message);
            }
            LoadData();
        }

        public void DeleteHandler(GridCommandEventArgs args)
        {
            Console.WriteLine("---Deleting entity---");
            var model = (Dictionary<string, object>)args.Item;
            var entity = model.ToEntity(DataService.GetEmpty(TableName));
            try
            {
                DataService.DeleteOne(entity);
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
                ErrorWindow.Show("DELETE",entity.ToString(),e.Message);
            }
            LoadData();
        }

        private void EditItem(Dictionary<string, object> argsItem)
        {
            TableItem = argsItem;
            EditWindow.WindowIsVisible = true;
            StateHasChanged();
        }
        
        public void UpdateHandler(Dictionary<string, object> argsItem)
        {
            Console.WriteLine("---Updating entity---");
            var entity = argsItem.ToEntity(DataService.GetEmpty(TableName));
            Console.WriteLine(entity);
            try
            {
                DataService.UpdateOne(entity);
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
                ErrorWindow.Show("UPDATE",entity.ToString(),e.Message);
            }
            LoadData();
        }

        private void DisplayItem(Dictionary<string, object> argsItem)
        {
            TableItem = argsItem;
            InfoWindow.WindowIsVisible = true;
            StateHasChanged();
        }

    }

    <style>
    .width-100 {
        width: 100%;
    }
    .grid .k-grid-content tr {
        line-height: 32px;
    }
</style>
</TelerikRootComponent>